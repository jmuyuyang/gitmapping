#!/usr/bin/env node
var path = require("path");
var program = require('commander');
var logule = require("logule").init(module);
var async = require("async");
var gitmapping = require('../lib/gitmapping');
var meta = require("../lib/meta");
var fs = require("fs");

var usages = [
  'init       - init git repo <remote-url> <--branch> <--version>           ',
  'add        - add git maping rules <name> <source> <target> <allow> <deny>',
  'rm         - remove git maping rules <name>',
  'rname      - rname git maping rules <old name> <new name>',
  'run        - run and mapping the rule <name>'
];

var usageString = usages.reduce(function(result, item, i) {
  if (i > 0) result += '\n         ' + path.basename(process.argv[1]) + ' ';
  result += item;
  return result;
});

program
  .usage(usageString)
  .option('-s, --source [source]', 'source name of the repository for gitmapping')
  .option('-b, --branch [branch]', 'branch of the repository for gitmapping init')
  .option('-v, --versions [versions]', 'version(commit or tag) for the repository')
  .option('-d, --dir','set the file type for maping rules')
  .option('-a, --allow [allow]', 'filter rules for maping files')
  .option('-i, --ignore [ingore]', 'filter rules for maping files')
  .option('-u, --update','update the repository before running the rule')
  .parse(process.argv);


var mapping = function(args){
	this.args = args;
};

mapping.prototype.init = function(){
	var remoteUrl = this.args[1];
	var branch = program.branch?program.branch:"master";
	var source_list = remoteUrl.split("/");
	var sources = source_list[source_list.length-1].match("(.*).git");
	if(!sources) return logule.error("repository url is not correct");
	if(!program.source){
		var source = sources[1];
	}else{
		var source = program.source;
	}
	console.log("fetching repository.....this may take a few minutes");
	async.series([
		function(callback){
			gitmapping.find_meta(process.cwd(),callback);
		},
		function(callback){
			gitmapping.init(source,remoteUrl,branch,callback);
		},
		function(callback){
			gitmapping.configRepo(source,remoteUrl,branch);
			gitmapping.updateRepo(source,callback);
		},
		function(callback){
			logule.info("fetch remote repository from "+remoteUrl+" in /tmp/gitmapping/"+source);
			gitmapping.sync_meta(process.cwd(),callback);
		}
	],function(err,data){
		if(err) return logule.error(err);
		logule.info("add repository "+source+" in .gitmapping.json");	
	});
};

mapping.prototype.config = function(){
	var config = this.args[1].split(".");
	if(config.length != 2) return logule.error("cannot update config "+this.args[1]);
	var name = this.args[2];
	var val = this.args[3];
	async.series([
		function(callback){
			gitmapping.find_meta(process.cwd(),callback);
		},
		function(callback){
			var update = gitmapping.update(config[0],config[1],name,val);
			if(update){
				gitmapping.sync_meta(process.cwd(),callback);
			}else{
				callback("cannot update "+config[0]+" config");
			}
		}
	],function(err,data){
		if(err) return logule.error(err);
		logule.info("update "+name+" config "+config[1]);
	});	
};

mapping.prototype.check = function(){
	var name = this.args[1];
	async.series([
		function(callback){
			gitmapping.find_meta(process.cwd(),callback);
		},
		function(callback){
			gitmapping.diffStat(name,callback);
		}
	],function(err,data){
		if(err) return logule.error(err);
		console.log(data[1]);
	})
}

mapping.prototype.add = function(){
	var name = this.args[1];
	var source = this.args[2];
	if(this.args[3] == "/"){
		var target = process.cwd();
	}else{
		var target = process.cwd()+"/"+this.args[3];
	}
	if(!name || !source || !target){
		return logule.error("few arguments for add mapping rules");
	}
	if(!program.source){
		return logule.error("please use -s define the source name for the repository");
	}
	if(program.dir){
		var options = {
			type:"dir",
			allow:program.allow?program.allow:null,
			deny:program.deny?program.deny:null
		};
	}else{
		var options = {
			type:"file"
		};
	}
	options.version = program.versions?program.version:null;
	async.series([
		function(callback){
			gitmapping.find_meta(process.cwd(),callback);
		},
		function(callback){
			gitmapping.add(name,program.source,source,target,options);
			gitmapping.sync_meta(process.cwd(),callback);
		}
	],function(err,data){
		if(err) return logule.error(err);
		logule.info("add mapping rule "+name);
		logule.info("update .gitmapping.json");
	});
}

mapping.prototype.rm = function(){
	var name = this.args[1];
	async.series([
		function(callback){
			gitmapping.find_meta(process.cwd(),callback);
		},
		function(callback){
			var rmInfo = gitmapping.rm(name);
			if(rmInfo){
				gitmapping.sync_meta(process.cwd(),callback);
			}else{
				callback("cannot find rule "+name);
			}
		}
	],function(err,data){
		if(err) return logule.error(err);
		logule.info("rm rule "+name);
	});	
}

mapping.prototype.rname = function(){
	var old_name = this.args[1];
	var new_name = this.args[2];
	async.series([
		function(callback){
			gitmapping.find_meta(process.cwd(),callback);
		},
		function(callback){
			var rnameInfo = gitmapping.rname(old_name,new_name);
			if(rnameInfo){
				gitmapping.sync_meta(process.cwd(),callback);
			}else{
				callback("cannot find rule "+old_name);
			}
		}
	],function(err,data){
		if(err) return logule.error(err);
		logule.info("rname rule "+old_name+" to "+new_name);
	});	
}

mapping.prototype.run = function(){
	var rules = this.args[1]?this.args[1].split(","):null;
	var dir = process.cwd();
	var updateRepo = program.update?1:0;
	gitmapping.runWithFile(dir,rules,updateRepo,function(err,result){
		if(err) return logule.error(err);
		if(updateRepo) logule.info(result[1]);
		else logule.info(result[0]);
	});
}


if(program.args.length > 0){
	var args = program.args;
	var map = new mapping(args);
	switch(args[0]){
		case "init":{
			map.init();
			break;
		}
		case "add":{
			map.add();
			break;
		}
		case "config":{
			map.config();
			break;
		}
		case "rm":{
			map.rm();
			break;
		}
		case "rname":{
			map.rname();
			break;
		}
		case "check":{
			map.check();
			break;
		}
		case "run":{
			map.run();
			break;
		}
		default:{
			logule.error("command is not exists")
		}
	}	
}
