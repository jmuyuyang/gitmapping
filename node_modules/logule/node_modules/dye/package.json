{
  "name": "dye",
  "author": {
    "name": "Eirik Albrigtsen",
    "email": "analsandblaster@gmail.com"
  },
  "description": "Coloring library for console strings",
  "version": "0.1.0",
  "main": "dye.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/clux/dye.git"
  },
  "scripts": {
    "test": "tap ./test"
  },
  "keywords": [
    "color",
    "terminal",
    "ANSI",
    "escape",
    "sequence",
    "zalgo",
    "console"
  ],
  "devDependencies": {
    "tap": "~0.2.5",
    "subset": "~0.1.1"
  },
  "bugs": {
    "url": "http://github.com/clux/dye/issues"
  },
  "license": "MIT",
  "readme": "# Dye [![Build Status](https://secure.travis-ci.org/clux/logule.png)](http://travis-ci.org/clux/dye)\n\nDye is a coloring/styling library for wrapping common ANSI escape sequences around text that produce colors/styling when sent to `stdout`. It also comes with a much more customizable and easy to use [zalgolizer](#zalgo)\n\nThe interface mostly mirrors the popular `colors` module on `npm`, but does not introduce implicit global dependencies in your code via `String.prototype`, and has been cleaned up for terminal use only.\n\n## Safe Usage\nBasic usage is simply `dye.red(str)`. All the exported colors with `bold` (aka bright) variants should work everywhere. Here we test all the methods in both variants.\n\n```js\nvar dye = require('dye');\nvar cols = ['white', 'black', 'grey', 'blue', 'cyan', 'green', 'magenta', 'red','yellow'];\ncols.forEach(function (col) {\n  var escapedStr = dye[col](col);\n  console.log(escapedStr);\n  console.log(dye.bold(escapedStr));\n});\n```\n\n![example output!](https://github.com/clux/dye/raw/master/imgs/output.png)\n\n## Fun / Experimental Stuff\nThe `inverse`, `underline`, `italic` functions have sparse support (no worky on windows).\n\n### zebra()\nAlternates between unwrapped chars and `inverse` applied chars to create a zebra effect.\nBecause of the reliance on `inverse`, this is not widely supported.\n\n### rainbow()\nCycles through `red`, `yellow`, `green`, `blue` and `magenta` to create a rainbow effect on text.\n\nDirect use of this should work everywhere, but a bold/bright version, i.e. `dye.bold(dye.rainbow('bright rainbow'))` might fail depending on how escape code parsing handles nesting in your terminal (no worky on windows).\n\n### zalgo()\n[H̸̡̪̯ͨ͊̽̅̾̎Ȩ̬̩̾͛ͪ̈́̀́͘ ̶̧̨̱̹̭̯ͧ̾ͬC̷̙̲̝͖ͭ̏ͥͮ͟Oͮ͏̮̪̝͍M̲̖͊̒ͪͩͬ̚̚͜Ȇ̴̟̟͙̞ͩ͌͝S̨̥̫͎̭ͯ̿̔̀ͅ](http://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).\n\nThis is a uniform-clustered zalgolizer. It picks up to a specified number of symbols from each [subarray of souls](https://github.com/clux/dye/blob/master/dye.js#L42) at uniform randomness (with probability `p`), or picks from it no symbols at all (with probability `1-p`).\n\nThe probability lets you specify how clustered you want the symbols (`p=1` ⇒ completely uniform distribution, `p=0.5` ⇒ on average half the letters get nothing, the rest are uniformly distributed)\n\nThe different [soul types](https://github.com/clux/dye/blob/master/dye.js#L42) contain symbols that go above, in the middle of, or underneath the text respectively.\n\nSome examples\n\n```js\ndye.zalgo('default zalgolization'); // p=.2, maxPicks = [5, 3, 5]\n'd̠̤̟̰efauḻt z͂̈al̊̚g͈oli̷za̪͉t̽̅i̘̪̫̼on'\n\ndye.zalgo('less clustered zalgolization', 0.7, [2, 1, 2]);\n'l̠̇es̞̏s ̌cl̟usṯer͑eͦd ̲z̮̅aḻ̽g̞o̮l͉̉iza̐t̄iͅỏ͖n͖'\n\ndye.zalgo('intense, clustered zalgolization', 0.2, [10, 5, 10])\n'i̛̩͖̤̯̮͠ͅn̷͟t͢en̝͎͇͙̭sͧͤͨ̓͗̾e͑̐ͫ̒ͨ̓ͮ̏̑, c̓lů͚̺̦̰̪͓͐ͯ̈ster͍̤͖͗͌̇ͨͦͥ̚é͜d̨̡͘͞ za̋ͬͫlgͧ̏ͧ̃ͫͭͯ̈̆ol̲͕̳͓͍̯̠i̢͢z̙ation͡'\n```\n\nA windows command line is impenetrable by zalgo and will display question marks instead.\n\nFinally, if you would like to sanitize / attempt to exorcise such a string, you can take the difference with the characters available via the exported `souls` function.\n\n## Installation\n\n```bash\n$ npm install dye\n```\n\n## Running tests\nInstall development dependencies\n\n```bash\n$ npm install\n```\n\nRun the tests\n\n```bash\n$ npm test\n```\n\n## License\nMIT-Licensed. See LICENSE file for details.\n",
  "_id": "dye@0.1.0",
  "dist": {
    "shasum": "cdd1d3a1748f539856ab382d72c4b64016c20467"
  },
  "_from": "dye@~0.1.0"
}
